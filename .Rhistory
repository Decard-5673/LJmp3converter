SecurityDelay, LateAircraftDelay, DepDelay,
DepDelayMinutes, DivDistance, DivArrDelay)
# THIS CELL TAKES LONGER TO RUN
# PLEASE RUN THIS LOCALLY, OR IT MAY FREEZE YOUR SKILLS NETWORK LABS KERNEL
# Download 2 million dataset
library(dplyr)
# We are going to be focusing on flights from  LAX to JFK and we will exclude
# flights that got cancelled or diverted
# we are also going to get only useful columns
sub_airline <- airlines %>%
filter(Origin == "LAX", Dest == "JFK",
Cancelled != 1, Diverted != 1) %>%
select(Month, DayOfWeek, FlightDate,
Reporting_Airline, Origin, Dest,
CRSDepTime, CRSArrTime, DepTime,
ArrTime, ArrDelay, ArrDelayMinutes,
CarrierDelay, WeatherDelay, NASDelay,
SecurityDelay, LateAircraftDelay, DepDelay,
DepDelayMinutes, DivDistance, DivArrDelay)
head(sub_airline)
#Let's check by using sapply() to apply typeof to every column in the dataframe sub_airline:
sapply(sub_airline, typeof)
sub_airline %>% filter(Month == 2) %>% summarize(no_of_dayofweek = count(DayOfWeek))
sub_airline %>% filter(Month == 2) %>% summarize(no_of_dayofweek = count(as.numeric(DayOfWeek)))
sub_airline %>% filter(Month == 2) %>% summarize(avg_of_dayofweek = mean(as.numeric(DayOfWeek)))
sub_airline %>% group_by(Month == 2) %>% summarize(avg_of_dayofweek = mean(as.numeric(DayOfWeek)))
sub_airline %>% group_by(Month) %>% summarize(avg_of_dayofweek = mean(as.numeric(DayOfWeek)))
#Data pre processing/ Data cleaning Data wrangling
#finding missing data
count(is.na(sub_airline$CarrierDelay))
#Data Import and Management
#readr (included in tidyr package)
#format and file path
library(tidyr)
#Data pre processing/ Data cleaning Data wrangling
#finding missing data
count(is.na(sub_airline$CarrierDelay))
#Data pre processing/ Data cleaning Data wrangling
#finding missing data
library(dplyr)
count(is.na(sub_airline$CarrierDelay))
count(1,2,3,4,5)
count(is.na(sub_airline$LateAircraftDelay))
sub_airline$LateAircraftDelay
is.na(sub_airline$LateAircraftDelay)
count(is.na(sub_airline$LateAircraftDelay)==TRUE)
count(is.na(sub_airline$LateAircraftDelay) = TRUE)
count(is.na(sub_airline$LateAircraftDelay) == TRUE)
sub_airline[LateAircraftDelay]
sub_airline["LateAircraftDelay"]
count(is.na(sub_airline["LateAircraftDelay"]))
sub_airline[, "LateAircraftDelay"]
count(is.na(sub_airline[, "LateAircraftDelay"]))
sum(is.na(sub_airline$LateAircraftDelay))
#finding missing data for all varibale
library(purrr)
sub_airline %>% map(~is.na())
sub_airline %>% map(~sum(is.na()))
sub_airline %>% map(~sum(is.na(.)))
data.frame(sub_airline %>% map(~sum(is.na(.))))
#Or
data.frame(sub_airline %>% map(function(x) sum(is.na(x))))
#replace nas
replaced_nas <- sub_airline %>% replace_na(list(CarrierDelay= 0,
WeatherDelay = 0,
NASDelay= 0,
SecurityDelay = 0,
LateAircraftDelay = 0))
dim(replaced_nas)
head(replaced_nas)
replaced_nas <- sub_airline %>% replace_na(c(CarrierDelay= 0,
WeatherDelay = 0,
NASDelay= 0,
SecurityDelay = 0,
LateAircraftDelay = 0))
#data formatting
#separate function
date_airline <- replaced_nas %>% separate(FlightDate, sep = '-', into = c("year", "month", "day"))
head(date_airline)
#convert char to numeric
date_airline %>% select(year, month, day) %>% mutate_all(type.convert) %>% mutate_if(is.character, as.numeric)
date_airline
#Data Binning
#grouping data in range or bins like 1-5, 6-10.....or quartiles or percentiles
binning <- sub_airline %>% mutate(quantile_rank = ntile(sub_airline$ArrDelay, 4))
head(binning)
View(binning)
#categorical to numerical
#when we have categorical varibales to a limited number we can expand this and create dummy variables or convert it into factors(best approach)
sub_airline %>% mutate(dummy =1) %>% spread(key = Reporting_Airline, value = dummy, fill = 0) %>% slice(1:5)
#categorical to numerical
#when we have categorical varibales to a limited number we can expand this and create dummy variables or convert it into factors(best approach)
View(sub_airline %>% mutate(dummy =1) %>% spread(key = Reporting_Airline, value = dummy, fill = 0) %>% slice(1:5))
#categorical to numerical
#when we have categorical varibales to a limited number we can expand this and create dummy variables or convert it into factors(best approach)
View(sub_airline %>% mutate(dummy = 2) %>% spread(key = Reporting_Airline, value = dummy, fill = 0) %>% slice(1:5))
#categorical to numerical
#when we have categorical varibales to a limited number we can expand this and create dummy variables or convert it into factors(best approach)
View(sub_airline %>% mutate(dummy = ArrDelay) %>% spread(key = Reporting_Airline, value = dummy, fill = 0) %>% slice(1:5))
#or, here it omits the ArrDelay variable along with the dummy variable
View(sub_airline %>% spread(key = Reporting_Airline, value = ArrDelay))
#if you want a variable to take the dummy variable, here it keeps the ArrDelay variable along with the dummy variable
View(sub_airline %>% mutate(dummy = ArrDelay) %>% spread(key = Reporting_Airline, value = dummy, fill = 0) %>% slice(1:5))
#or, here it omits the ArrDelay variable along with the dummy variable, and fill is not specified so it will be na instead of 0
View(sub_airline %>% spread(key = Reporting_Airline, value = ArrDelay, fill = 0))
View(sub_airline %>% replace_na(list(CarrierDelay= mean(CarrierDelay))))
#Exploratory Data analysis
#Exploratory Data analysis
sub_airline %>% filter(Reporting_Airline, ArrDelay)
#Exploratory Data analysis
library(dplyr)
sub_airline %>% filter(Reporting_Airline, ArrDelay)
sub_airline %>% filter(Reporting_Airline| ArrDelay)
sub_airline %>% filter(Reporting_Airline | ArrDelay)
sub_airline %>% filter(Reporting_Airline == "AA" | ArrDelay == 0.55)
library(ggplot2)
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) %>% geom_boxplot()
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot()
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot() + geom_jitter(aes(colour = 'blue')) +
labs(x ="Airline")+ ggtitle("Arrival delays by Airline") + theme_minimal()
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot() + geom_jitter(aes(colour = 'blue')) +
labs(x ="Airline")+ ggtitle("Arrival delays by Airline") + theme_minimal() +
coord_cartesian(ylim = quantile(sub_airline$ArrDelay, c(0, 0.99)))
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot(alpha = 0.3) + geom_jitter(aes(colour = 'blue')) +
labs(x ="Airline")+ ggtitle("Arrival delays by Airline") + theme_minimal() +
coord_cartesian(ylim = quantile(sub_airline$ArrDelay, c(0, 0.99)))
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot(fill = "bisque",color = "black", alpha = 0.3) + geom_jitter(aes(colour = 'blue')) +
labs(x ="Airline")+ ggtitle("Arrival delays by Airline") + theme_minimal() +
coord_cartesian(ylim = quantile(sub_airline$ArrDelay, c(0, 0.99)))
sub_airline %>% ggplot(aes(Reporting_Airline, ArrDelay)) + geom_boxplot() + geom_jitter(aes(colour = 'blue'), alpha = 0.2) +
labs(x ="Airline")+ ggtitle("Arrival delays by Airline") + theme_minimal() +
coord_cartesian(ylim = quantile(sub_airline$ArrDelay, c(0, 0.99)))
sub_airline %>% ggplot(aes(DepDelay, ArrDelay)) + geom_jitter()
sub_airline %>% ggplot(aes(DepDelay, ArrDelay)) + geom_jitter() + ggtitle("Alaska Flight Depature Delays vs Arrival Delays")
sub_airline %>% ggplot(aes(DepDelay, ArrDelay)) + geom_point() + ggtitle("Alaska Flight Depature Delays vs Arrival Delays")
alaska_flights <- sub_airline %>%
filter(Reporting_Airline == "AS") %>%
filter(!is.na(DepDelay) & !is.na(ArrDelay)) %>%
filter(DepDelay < 40)
ggplot(data = alaska_flights, mapping = aes(x = DepDelay, y = ArrDelay)) +
geom_point() +
ggtitle("Alaska Flight Depature Delays vs Arrival Delays")
sub_airline %>% ggplot(aes(DepDelayMinutes, ArrDelayMinutes)) + geom_point() + geom_smooth(method = 'lm')
sub_airline %>% ggplot(aes(DepDelayMinutes, ArrDelayMinutes)) + geom_point() + geom_smooth(method = 'lm', na.rm = TRUE)
ggplot(data = sub_airline, mapping = aes(x = CarrierDelay, y = ArrDelayMinutes)) +
geom_point() +
geom_smooth(method = "lm", na.rm = TRUE)
n(sub_airline$Month)
?n()
n(sub_airline)
summary_airline_delays <- sub_airline %>%
group_by(Reporting_Airline) %>%
summarize(count = n(),
mean = mean(ArrDelayMinutes, na.rm = TRUE),
std_dev = sd(ArrDelayMinutes, na.rm = TRUE),
min = min(ArrDelayMinutes, na.rm = TRUE),
median = median(ArrDelayMinutes, na.rm=TRUE),
iqr = IQR(ArrDelayMinutes, na.rm = TRUE),
max = max(ArrDelayMinutes, na.rm = TRUE))
summary_airline_delays
nrow(sub_airline)
count(sub_airline$Reporting_Airline)
sub_airline %>%
count(Reporting_Airline)
count(sub_airline[Reporting_Airline])
count(sub_airline[,"Reporting_Airline"])
count(sub_airline["Reporting_Airline"])
count(group_by(sub_airline$Reporting_Airline))
group_by(count(sub_airline$Reporting_Airline))
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "white", size = 0.2) +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
avg_delays <- sub_airline %>%
group_by(Reporting_Airline, DayOfWeek) %>%
summarize(mean_delays = mean(ArrDelayMinutes))
head(avg_delays)
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "white", size = 0.2) +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "black", size = 0.2) +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "blue", size = 0.2) +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "cyan", size = 0.2) +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile(color = "cyan") +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# The color is still hard to see and identify,  let's change the color
avg_delays %>%
ggplot(aes(x = Reporting_Airline,
y = DayOfWeek,
fill = mean_delays)) +
# set the tile's borders to be white with size 0.2
geom_tile() +
# define gradient color scales
scale_fill_gradient(low = "yellow", high = "red")
# This visualization will use lubridate package
library(lubridate)
avg_delays <- sub_airline %>%
group_by(Reporting_Airline, DayOfWeek) %>%
summarize(mean_delays = mean(ArrDelayMinutes), .groups = 'keep') %>%
# create a new variable "bins" from mean_delays
# make the first range -0.1 to 0.1 to include zero values
mutate(bins = cut(mean_delays,breaks = c(-0.1,0.1,10,20,30,50, max(mean_delays)),
labels = c("0","0-10","10-20","20-30","30-50",">50"))) %>%
mutate(bins = factor(as.character(bins),levels = rev(levels(bins))))
ggplot(avg_delays, aes(x = Reporting_Airline,
y = lubridate::wday(DayOfWeek, label = TRUE),
fill = bins)) +
geom_tile(colour = "white", size = 0.2) +
geom_text(aes(label = round(mean_delays, 3))) +
guides(fill = guide_legend(title = "Delays Time Scale"))+
labs(x = "Reporting Airline",y = "Day of Week",title = "Average Arrival Delays")+
# Define color palette for the scale
scale_fill_manual(values = c("#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4"))
sub_airline %>%
cor.test(~DepDelayMinutes + ArrDelayMinutes, data = .)
cor.test(sub_airline$DepDelayMinutes, sub_airline$ArrDelayMinutes)
correlation
correlation <- sub_airline %>%
select(ArrDelayMinutes, DepDelayMinutes,
CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay) %>%
cor(use = "pairwise.complete.obs", method = "pearson")
correlation
library(corrplot)
install.packages("corrplot")
library(corrplot)
numerics_airline <- sub_airline %>%
select(ArrDelayMinutes, DepDelayMinutes, CarrierDelay,
WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay)
airlines_cor <- cor(numerics_airline, method = "pearson", use='pairwise.complete.obs')
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(airlines_cor, method = "color", col = col(200),
type = "upper", order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black", tl.srt = 45, #Text label color and rotation
)
install.packages("av")
library(av)
input_file <- "C:\\Users\\lijin\\Downloads\\Suniye_To.mp4" # or "path/to/your_video.mkv"
output_file <- "C:\\Users\\lijin\\Downloads\\output.mp3"
av_audio_convert(
input = input_file,
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
av_audio_convert(
file = input_file,
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
av_audio_convert(
infile = input_file,
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
av_audio_convert(
input = input_file,
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
?av_audio_convert
av_audio_convert(
"C:\\Users\\lijin\\Downloads\\Suniye_To.mp4",
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
av_audio_convert(
"C:\\Users\\lijin\\Downloads\\Suniye_To.mp4",
output = output_file,
format = "mp3", # Output format
channels = 2, # Stereo
sample_rate = 16000, # 16 kHz
bit_rate = 32000 # 32 kbps
)
library(fs)
# Define input folder and output folder
input_folder <- "C:\\Users\\lijin\\Downloads\\Videos"  # Change this to your folder path
output_folder <- "C:\\Users\\lijin\\Downloads\\Converted_Audio" # Change this to your desired output folder
# Create output folder if it does not exist
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Get list of all .mp4 and .mkv files in the folder
video_files <- list.files(input_folder, pattern = "\\.(mp4|mkv)$", full.names = TRUE, ignore.case = TRUE)
# Loop through each video file and convert to MP3
for (video in video_files) {
# Generate output file name
output_file <- file.path(output_folder, paste0(tools::file_path_sans_ext(basename(video)), ".mp3"))
# Convert video to MP3
av_audio_convert(
video,
output = output_file,
format = "mp3",
channels = 2,
sample_rate = 16000,
bit_rate = 32000
)
print(paste("Converted:", video, "->", output_file))
}
print("Batch conversion complete!")
# Define input folder and output folder
input_folder <- "C:\\Users\\lijin\\Downloads\\Video"  # Change this to your folder path
output_folder <- "C:\\Users\\lijin\\Downloads\\Converted_Audio" # Change this to your desired output folder
# Create output folder if it does not exist
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Get list of all .mp4 and .mkv files in the folder
video_files <- list.files(input_folder, pattern = "\\.(mp4|mkv)$", full.names = TRUE, ignore.case = TRUE)
# Loop through each video file and convert to MP3
for (video in video_files) {
# Generate output file name
output_file <- file.path(output_folder, paste0(tools::file_path_sans_ext(basename(video)), ".mp3"))
# Convert video to MP3
av_audio_convert(
video,
output = output_file,
format = "mp3",
channels = 2,
sample_rate = 16000,
bit_rate = 32000
)
print(paste("Converted:", video, "->", output_file))
}
print("Batch conversion complete!")
# Define input folder and output folder
input_folder <- "C:\\Users\\lijin\\Downloads\\Video"  # Change this to your folder path
output_folder <- "C:\\Users\\lijin\\Downloads\\Converted_Audio" # Change this to your desired output folder
# Create output folder if it does not exist
if (!dir.exists(output_folder)) {
dir.create(output_folder)
}
# Get list of all .mp4 and .mkv files in the folder
video_files <- list.files(input_folder, pattern = "\\.(mp4|mkv)$", full.names = TRUE, ignore.case = TRUE)
# Loop through each video file and convert to MP3
for (video in video_files) {
# Generate output file name
output_file <- file.path(output_folder, paste0(tools::file_path_sans_ext(basename(video)), ".mp3"))
# Convert video to MP3
av_audio_convert(
video,
output = output_file,
format = "mp3",
channels = 2,
sample_rate = 16000,
bit_rate = 64000
)
print(paste("Converted:", video, "->", output_file))
}
print("Batch conversion complete!")
install.packages("youtube_dl")
install.packages("reticulate")
reticulate::py_install("yt-dlp")
library(reticulate)
yt_dlp <- import("yt_dlp")
video_url <- "https://events.q4inc.com/attendee/885430199/guest"  # Replace with actual link
video_url <- "https://events.q4inc.com/attendee/885430199/guest"  # Replace with actual link
output_folders <- "C:/Users/lijin/Downloads"
# Define output file format
options <- list(outtmpl = paste0(output_folders, "/%(title)s.%(ext)s"))
# Download the video
yt_dlp$YoutubeDL(options)$download(video_url)
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
warnings()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
library(LJexm)
run_app()
library(testthat)
usethis::use_test("run_app")
testthat::test_package("LJexm")
install.packages("testthat")
devtools::check()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
testthat("run_app() runs without errors", {
expect_error(run_app(), NA)
})
library(testthat)
testthat("run_app() runs without errors", {
expect_error(run_app(), NA)
})
usethis::use_test("run_app")
test_that("run_app() runs without errors", {
expect_error(run_app(), NA)
})
test_that("run_app() runs without errors", {
expect_error(run_app(), NA)
})
test_that("run_app() runs without errors", {
expect_error(run_app(), NA)
})
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::check()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
devtools::build()
devtools::check_win_devel()
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
install.packages(c("devtools", "usethis", "shiny", "fs"))
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
devtools::document()
devtools::install()
devtools::check()
file.show("tests/testthat.Rout.fail")
library(LJmp3converter)
run_converter_app()
devtools::test()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
setwd("C:/Users/lijin/Downloads/LJexm")
devtools::document()
devtools::install()
devtools::check()
devtools::build()
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
devtools::document()
devtools::install()
devtools::check()
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
devtools::document()
devtools::install()
devtools::check()
library(LJmp3converter)
run_converter_app()
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
devtools::document()
devtools::install()
devtools::check()
devtools::build()
setwd("C:\\Users\\lijin\\Downloads\\LJmp3converter")
devtools::document()
devtools::install()
devtools::check()
devtools::build()
